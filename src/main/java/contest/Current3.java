package contest;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class Current3 {

    public int maxFreq(String s, int ml, int minSize, int maxSize) {
        char[] cs = s.toCharArray();
        int n = cs.length;
        Set<String> set = new HashSet<>();
        Map<Character, Integer> map = new HashMap<>();
        ml = Math.min(ml, maxSize);
        int l = 0;
        for(int i=0;i<n;i++) {
            map.put(cs[i], map.getOrDefault(cs[i], 0) + 1);
            while(map.keySet().size() > ml) {
                char left = cs[l++];
                map.put(left, map.get(left) - 1);
                if(map.get(left) == 0) map.remove(left);
            }
            int l1 = l;
            while((i-l1+1) >= minSize && (i-l1+1) <= maxSize) {
                l1++;
            }
            l1--;
            if((i-l1+1) >= minSize && (i-l1+1) <= maxSize) {
                set.add(s.substring(Math.max(0, l1), i+1));
            }
        }

        int max = 0;
        for(String t : set) {
            int num = 0;
            for(int i = 0;i+t.length()-1<n;i++) {
                if(cs[i] == t.charAt(0) && s.substring(i, i+t.length()).equals(t)) {
                    num++;
                }
            }
            max = Math.max(max, num);
        }
        return max;
    }

    public static void main(String[] args) {
        String test = "ljkelhjicdmmhdbahibcdhfgmkccjbmdggfflamidcmabmihckdblchdhiddcmffahmmcghlhamajmcfldmgacgfmfkaifgeljkdggfjamlecdgakblaajjakhaichjjmgfhmdckfebmmbgbfkbekakamhkgeehcbmiibcfagamhhfbgafiiekkfcbbejaclcdlfgiijbekjbhkccelgljfhlkfidgihkamfgmfddgdglifbikhmgicbgmlaifjddebcaffkedfgmgaikcmlijjlhddjamlcgiaialdmhbkddalkfhhkajajgcdjcaiaedfmlejabdlmfceijiijfbaeilbfdhcificlhmieagkkglfgdjamblmihhaeghljlhkhidjafhgadgajlkikhijekkhiahldiibhjhifmgbdjdcfhijeiemchkhkcihchjfacaddfgckickiecijkjfhffkeemcdhgegbdfhigiihdhldklaidjjjeehlbcdedcggekalbdaflbebcdlljgbkgjelgmfmeifdejmiggjcclbbkjiicdlffmchjbmafcikckdeaghbkbeagmijamhgjmlmmjbikdkkfacaichgccjhihdfahiifkifbbfgdjjgcgmiaeidfehadljcbgakcjcihhbdkeggbkkhmcgedmfmfmbedldjliffgbcgeddldjfmhmhilhjfmibjhejhhgdiidgmgmjhhcgglkcfbecglagaglfccdjlgahdmlijgimgaejkkalhjjbihimiffhdggecklgjbleilfljbghmcdejhjlkkajkimiblgcegeiliibdhllkihacfkmdbjhgfdbhhahmdmkjhhhdddiifbjgffhhddmeijjjfahebmhldjeefgjlckbamfhckmbidmhldlklgalblcjillkdjdgcmhlaimklcjleiaijikaaelhhgcjikmcgkgmkebkllklkdajcdlbbmdlfiaamceabdlhmiheiggechmacemkbaaalcfgeccaddlibccdfgkgkifjhiehmdmkbajelmafhgjldbdamalilbaemjbfcmdgdkgegcfcajbbdfamfkakmacfifecmbjjlflhkcibdagbhjbjagigjbekeijhcfhajmfcjdcbjibckdacdimchbjghbmhehljjbbaafafedfillaeiliedgclkfakcgemcdbhmcllamlmeafaaicahiamggaijfhldjhedieccjeilkfhmhjbhefbmlkbbdhhfmikghkhbekfjigikbbfgjagglmhbjchdfllidkhbhgbfbcfmdemhchhbbcidcblkbjklaedkkbfhibfjfcdakbaedeeljimebbjikejbjilcalgddgjjgdfebgbgbfgjdmmjggjdfddkjdlfdkkhgmjikhhadjckabdkehbdbflgiibhaldhlmmkdkmjiciejcjldacdhcjeijjefldgliccggjcbfdamgakkidedchhdhghmhbhflhhmgmgfemheechehljkhclilgjbebljhbkmllebaijkkjhjgjikmbbcjigbjdglfiebdfacaalgmahmbcdeiigmddcjgibbjaegafjgmidbhghlemjalgkchfafeefcbjbllmjkhcjlgmchfkidkhkdembajjmhdkmkbickcbcddhjaebdcjlbilglcbhfcgldimbjhbejhaeikmklgehmebkmlaeijjbibihegkdgjecjabljgajjmhckddcmmcfcdgmgbfaajgjlimbjfmikdbcglbkhfabekgdbllhljgmejiledmbemdjiakhdbbgcjkjjklfkedgblhadjmlkdmlibladfeihflhdjbdaaaagljkdkgmfhcgmejimicmfdlaiejbebheghcgcdfaelflbegdgedjicbkbdgdmcllekkdajcmmlccchclhdcdbgbgcfalcdghlbmedmkleagemikhdjckelgmijfimfkbdajjlfkmeaddmchhfleejekgfllihkhmgbhihidflkmfaimgmhaclikckggemlikhekflgcleldkbgkbkfeemddikimgefjedgemielihkhajekdaiacihcbkbhicfcchjhaigafbmddjdfimafmbhhhkiglbklgjceibdgibfjcdacgmhfbdffhcikikekdmcmeehabceejlhjmfchfcamidkamldbemkjefdibabccckliemljiliagcmjbeefmbkgmggjkchckkgejjkmamkckdaahjhjhbkgbcfmlgakbdgakjdiahgjlbfkadfaljmmhiackhcgijhalfeclmkbbelijhbblclkkdekbcjcjlhfeckbjibjacbcmhlijgkdikeimahhcchfegaclaihhkhaemcjkjkchldddejflkfmggicamkefibalabccacgdgfjekgehahabihhhhjfbfidkdjkceljaikfilckgmbdbcadigijbdbdmdmbecacfjakfcgccjjahlffcgkhglgklmdlmgaeifcmdebmmgiamlkbaekibidjeicjelbibfcaeiijbgcmmmgdeadkfbdcjceicdliaifachhfibjbfleaeakceehjkmcaldgdjigfmhmlmiefiljbllaimdcaeidbflkbfgaeembiecgkedkkdlhajmafdfjmhgldjakfkjkbkeggjijkfelmffdbggdjhcdbiaedemhfijefdejcjldjgmmllgakmaadbiahfjabgkleblmaciifihhedaclmhfmbmmchldgiebleeehfjfllgaeecggkgfkafeaigbljjaljdachmbakegdeaijlbggbgmbeeiehcmmajkbbkdaihagcfabamggdbiljifcabkddcfkgmlglgififildgmcdekcljjbfbakcglgieiilfjkhhkjgcafcaebmiglfgiehbhacfekiidibkklkkbhjblicjkmeaafimdklihfgigiaigkkfggekljhckgibddkeiblmemdfdccmcfcfldkgcmhealjjfehiaefilfbeamlbikdjgldiaiededalhjbkjjalhdaagaemaijfghahcgjgakcgeklcibfghdkejaallhmcbfcddfdaicliakgbbdillfabdgmddicfahgfkmbelcjeackibhhelaljcmgbijdbjjmbiekgbfhaghmdijgbghmhjdmhmabhfimchmfafjiijaiijgffgmeacebeldjkbghfefmgekiljlbfgfbjcfagbhhglekcfjjbidjmimfejbgmeafaffghhbcacakckcjkaciedhkieakghiibhjhlghgilfihcfkdagjcbeilemimlglibdajcekiijacadmmfbgbbkfclihkmbdgmbilhebmdakhcgiihedfdkjfidcmkicagmcdjifimfadcgeaklfimljfmifgkdkehelljbmjaljkfamdkkllgeacdhcjambcilmejmcgcbdkfebflbkmgemjlmalklklmimiembkfbjggigfcehijdilcbfkfmcmcicahjmmafkmfmjgdmdmddfkjgmicccbfeilbhglbamjmljajihhiciiemiihfcjbemjbjdmfhjjkldkkjlimidhilhajibjdchgjllfkhlmicglfbiegjmjjclkljmdgfmfcmajmfmcbiaeadehbahbgamjddhcmdklclcijcjfkiahjlhicmieehdlibkijkcddhagihcafkhgdelhbfgchhjjffhhecgkabifibjfkkfcbhjflmmmlagmafleacmdeaecjehgbfckiilkkhflaibamljabmdakfccacdgfegmjcllgdcmmmgffmabmfblhecblcbgeeeffjlkcmkjgdjfaeglckbidgjegmicmimbejaebbimaaggfcklllfdajfmjhdjdmlakfkheebkkkiihhfmhcclclhalcfiimmfedecekddfjmieficflabmbdhcbjedldeggccakhamchabkcmdhfhajjdafhhljfbifedhfjdjmllmklhiihkghfelhbjigdiiikjmhgjbiigjfeijfdbdbdbjkdaeebailcebfbblmiglchhbfmmcmehfeigkciclldchmejhhbljmbccdlclaifgmdficgehbieiiddceddbhadbfflkfeehmfiklgfcdhbkeaccdfikekimclklkdekglhbbcmbfaamaggcbefdciclahegciagdkgkggmjlbglaeckfegjfcjddefeekjalbhdcibihfbclkafefiabdidclkghdkmdmaembkdfdjcifjmcdcdimbkjcdlglfbmailbcggaegacefmaaalbebhfehebbfjjjkagjhladhmgebfelljddmgmdcbajdahdfgilbkbkjahgclbehbjegigmjlkdchdgafkjgbfebfbmeidhiafemhjilakmibgekdchlgbfckfmbcafkhjhbfjbbhmbmdahjadmckcbkimgjmablmkgggahbblfmclcjidembikgidifcbbgabbelfidedefidamcilgejakidebdmbakjdlfjmikgablhhimchegaeegahejdddafdilgfaflmhcikgiehibcbmfidgaklmedhhalfdhegbadfejedidimlaccckjjebcedmigdakcchlbhecfkgaibheflecakidlbldgifhigjhdebgigkhibkcifkeaajfamfallealgmkejmkikbdddgljgmfbbfjgadidmfgdgjbgmgkkidlgccbjbdjblemgkagdlalehfigkdkdeagdjccmejlcjelakmmijeihhcjabghkbdhlcfllhhcgfdjccffmeggbhgkhhikjiaamdilfkahhhmdeihlhaaelcfggcgdgiflglibbeablaihechdkbhfcelcmmffakfgkmghgbgfcclfkcbdacejjbgleicidieiihakklbdkjdbafkdghelcjbglkkfhjdglkmgahdheccgkclfgaaakekddleellhkdbhkfelmficljfmjibdlljihajebkfgjhjeedilceadicmdcdijllaeggdjdfldcjgajgafcflhdagdkikbedkfcjafcclhdjemcaabbijhlahhghkjhdjhkckmkckihebcjakkacblhkjkblccjghlceammbefdggafgkmcagmcjiheambjbhbkmbamgelheelbblalmcimfgbbjiahcecagfkjfdiecahlfkjgddefegibbmelhmiklaielakdfiefkehbhagjladhdelfhdcdmekfdjgjkjjdcmgbjhcdbbelldkllifdjgmljbcjgdicldkeikkbmchbljblkllmalaadeeijkekbjcjljjfhhhdmgabhajafclmeecakkfhjdmjbhfmkegkldfhmfbfclfjjjjhgkgcbmefglcdafmacjjmdildhemjheimbclfjeldlmhfhlajlamhjabekkkbieihafeebllgfdhjlbjddelccmhfimcmhjefablgggljdceiccikkdhfckcmbihbccljhlcgkhjjgafjcllkhjblaidcfadkfggiaejcgbljmaillkcgjjggkgdkcjmbdaegbhgiiilemgciegjbaagcjkfhmikhkabielhfafhbkdddadjigdclhlmjjgmfhmmckjklhhibkmcddjgfciecbgdbikimmflmkfgadembghlbfljcgadbkliaehmjfibjbmabmjdfbjcadmjdalkakgcckgiefhjichgahljglfmeebbjacgajhekleigfdckgkemkakledllkkibammicbjbmfkkhachgjjfbmhaiaecgmlmkhmkafimccblgkkheihccbachcimjmkelcmdbcacbkgclgjeeffbfckehclmmddamlfklaafeggeelkfakjfealblflfafbeamfgjadamlebdmlmbdiigagalmalgfmfigeakafadmbjehemkjmeddelfbbhmdeifakhgkcgfhcefaaicikdhgjibhfggmfcdfehaflkbagbllmbemmalidmlgalcbjfdlahibaaaafklbaeeljalkdhkdbgmkebbgadlfacmhdgjikalfldbijliebdmajjgemahjhcggkehcikajeadcjafbhhbmcldmkjlicbbjahlmhmbmjjjeadjiflgbgagiiggjdekafbifkihljffjdgjbejjcjhkikmhecggcmecilemhkmmammeegijfmhcbidkbhimlilimllcmihajjbljldkhacijdlihejdbfkffmekcehcjcfbaeeiiddkeelfimmeimfbaahegjhjfhfegdhmkfmmihjilgfggkkdmfckkhkhmlajahjhlamgjbbdbikcdmjdkmlgeidfgeaadlfcdeelmhbimaeifafleeljjgageicjcfdgiegdjjfikgacgchlgigfekedjalilhbejeahmllcfidibkijljkikaaciljgjblmadjlgeahgdjadmbjjmmalhhcmgdbbejlhcabbhkdidegmiakkmgafdikabgkcdlghjdfialdgdmfkbmljegddbakmamgaakagfhllddlgbjfkeadkdbegefejaekdmadilgicglldiijljiedfblbkcmljfdjebedeeefiajkfmgbmgimiaicmkfkajljdeahbagmkjgddlmemahmhmegklmjaigldajejkgeemfefmmihgbfbikaadlfcjgbedahaicahdmagckdkbadcihmjcjedjfbjkhelcehimfkmgdifkigidgihkcemdfmcbdejbabhjkghhfejlbgmjkbimfdfehghemilabgalalceeigiemaeebglcfbkhagdkhjlmdmkfekcccbagjkeikgjjmlcdgmffbgahmlgjikfdijgkjmeicfahmmaejciaadbdaddjiflhcgjbdljkklbfblbgcgjdggfeefjmgadckiblbdilddhlgmclkeljmfmlffghldjieemdjfdimfjggdbkckediefkhjjddhllambjaijjceilbijcmmaealhdajedmdddkljchkhmeeflialfbmmbklkkmemekfklemfgebhdmelbikegmhhdadfkeammgfgjbahdbiaimgldgmkedifdjdjfekilgkbfdmjadllceamkgmhhmbgkffbkdbchbmcmckhkaeeagaeealehgiejalclelageffggemkklecbecfglldhglmcmbhahhedgadlmhmigfmacbkmljldajembjejacjkfdebihlllalbdhclgifdechfckkgmdfhafbcihmeklihhkacciaedchmlcikdhlbjkkiljlgbklddlfljckcdgedfbmjjfcamchkcgfmackceefeaaimeaglehfidihflclbihdlleegkdedblefiajafdajiaggmibdbfgejiiiimmcllkmabchamgccfmmfdaccikmeagafgfkadchlfaacdcllhmcmckijchmidjcllejdabkllacaicaggjjjimlldgihbahabdbjmaibidljagcmmkfccicddlglimhfblihdmmjfgedljlfmeeajagmfmhdlfcfefcabkdmbmghaamjggmhijeihbdjdlhhjkjdjlggecfkeiicikcdgcfclmbajcjbcjifbmbfjmabbgmccldcikelcdibekkghedhikbfdbaejhdlhkhfafbbbgjiaegladbljlkcdbgbedflimgfaekaieaijcdjdelcdbhfaibidieffekkelghgbhlldifmfgccacamadgcibidldegibaceikhejckaaijhalcebmjhadjemhbmfkallkbjfahcemdlmjjaiilkcmdhhakliiekdeifhmageflaellmjjbafecijalgdickfdjhmeeklmfeegiffcalcedldlaeillhbmmcamdbcmjhlfakaaflggkamkimeefmehfcefkhgemllhbkmmljjhbaacacgkdhikicfagmdhmjabjahdimbjbcemfidcicbckkbdlfgicmihgjmaigigedcmgemfkcimlihighfcifbkmdmbcieffmmbdkhfldidadadfalidgikaffgeajbdeeibggiamcfamlgmhfmcjhkgifmibadghcabkajakjlmcbdkdkgdfmmelfcmcajdmlekhgkieceidgkhbeeidgjgfjccldkmgifecbddfgkklhkdkmgbgfhgafddmadhlabmajieamihljdiajejilmfhkeikjhgfklgijleegkldbfkcigjkaihmgiafhjcgijgkchfifmeklfjejbgckhmdffdiaggfibgkfddelhhibjaifefkgddfljdgbmiahbmiebkhdifhhckigmembiclhlgamfejlcbgbmfgabbkflkegcbaeaelcajefacjbffblkgblibllbgaeeammfblacdhdchggddcedfmgmighgjljbhajjgeiaecfkbejjgmfbjmajildamdhlghmccdhakmaffaeibgbmmimajajgbgeddebgjhfkeldbhackackmcgjjlafajecdhjkalljegcmciidjjeckkflmlamadkieimmeeacldchhamemhdjmhehkhjehgefklfljdidfegifffljecfcdkkcbadccjmdfjijhimbgbbjkiaeagklebjekjeegejlelaibijjijghdlhmkjjaekjhmfchbkdijbcjbjimldbgcdgkegjajialhhifcjidfdikhmjlcdbgdlljibhachhjlmefjblhmbcjkjcalhkhjbhgjjgbdkgdikbebaeikdlbmbalbkiaaagfgkfbhjcgmflgbjibefbfkldakhlidckkbjeebefadgeiegklmmbmaagagedlfbckjcghmlkjmhhjeibegabkajgkhjmebkeiikkkieebmcmlggjghbiecdbfakbcbjfejjlhfbmdljhcifcblmlfddmlgcfhlcbehbcddjkcckkcfhiaemilmcbcjdgdkcbmmgbbfkgjbcbkkamlfabijfbblgdicljfefkdejcgdjcdgmbbhbdlemgbkmhgmdjmihekgkamamacfkdkcfjbflmdmhmkhecblikhabkklkfmkfajefkjdkkgbfflegddbhaddjjggecifffbaaijkhlcjblkaeefcdjdkfjjlkecfebfbjdhdheccehkhamjiiddgcgfelhaafmhfdieeagdhibfeihlefighebcfkigacmdkmcjmgdlhigjdmlhmhaeaffffgleeejfddbkgeaigaahbhaefaaijfkmihcikichcahlmbhjglkajdkmdcjeafebaiabebfamkiadfbdjjkihhbcffmbikbkdcbakkmldhmlhadhaamedbklefkafjcmjficclhkiecdbicfadcbmgbdegebmdbffiigbkcdlbdlgclegjlcdefbakccjgdkhdmcfhlkhkcbbhhdhmajdhadjkcmgcgkdclihdkebcjekbbibfhhgdalgmdkbblmelgadkmfcbcelccbimmbgejidhjkmkjaldfbfgigbffffkllfkbmfbflckjdkdaiifdmiceajekjkiefheblkkcahkbmkjkhhdbfdfbhjgbilgedkhiadiifjbigmajgjclecjakcgeccflmfalelljclagjhmdbefglbahggbhgfcldmimjacamfebickljddkligficidcccgjfakilmahm";
        Current3 current3 = new Current3();
//        int freq = current3.maxFreq(test, 5, 3, 19);
        int freq = current3.maxFreq("aababcaab", 2, 3, 4);
        System.out.println(freq);
    }
}
